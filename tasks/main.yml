---
- name: setting up pyramid apps
  block:
    - name: install scm packages
      ansible.builtin.apt: "name={{ packages }} state=latest"
      vars:
        packages:
          - git
    - name: create web root dir
      ansible.builtin.file:
        path: "{{ pyramid_apps_base_dir }}"
        state: "directory"
        recurse: "yes"
        mode: "0711"
        owner: "root"
        group: "root"
    - name: checkout source code via scm
      ansible.builtin.command: "git clone {{ item.repo_url }} {{ item.base_dir }}"
      args:
        creates: "{{ item.base_dir }}"
      loop: "{{ pyramid_apps }}"
    - name: create virtualenv under the project directory
      ansible.builtin.command: "python3 -m venv {{ item.base_dir }}/.venv"
      loop: "{{ pyramid_apps }}"
    - name: install poetry package
      ansible.builtin.command: "{{ item.base_dir }}/.venv/bin/pip install poetry"
      loop: "{{ pyramid_apps }}"
    - name: install project dependency packages
      ansible.builtin.command: "{{ item.base_dir }}/.venv/bin/poetry install"
      args:
        chdir: "{{ item.base_dir }}"
      loop: "{{ pyramid_apps }}"
    - name: fetch cpu count
      ansible.builtin.shell: "cat /proc/cpuinfo | grep ^processor | wc -l"
      register: cpu_count
    - name: setup wsgi configuration of the project
      ansible.builtin.copy:
        remote_src: "yes"
        src: "{{ item.base_dir }}/wsgi.py.sample"
        dest: "{{ item.base_dir }}/wsgi.py"
        owner: "root"
        group: "root"
        mode: "0644"
      loop: "{{ pyramid_apps }}"
    - name: install uwsgi configuration of the project
      ansible.builtin.template:
        src: "uwsgi.ini.j2"
        dest: "/opt/uwsgi/etc/{{ item.domain_name }}.ini" 
      loop: "{{ pyramid_apps }}"
    - name: restart uwsgi
      ansible.builtin.systemd:
        name: uwsgi.service
        state: restarted
    - name: generate pyramid production config
      ansible.builtin.template:
        src: "production.ini.j2"
        dest: "{{ item.base_dir }}/production.ini"
        owner: "www-data"
        group: "www-data"
        mode: "0600"
      loop: "{{ pyramid_apps }}"
    - name: setup session storage dir
      ansible.builtin.file:
        path: "{{ item.base_dir }}/data"
        owner: "www-data"
        group: "www-data"
        mode: "0700"
        state: "directory"
      loop: "{{ pyramid_apps }}"
    - name: check if alembic configs exist
      ansible.builtin.find:
        path: "{{ item.base_dir }}"
        pattern: "production.ini"
        contains: '^\[alembic\]'
      register: "alembic_configs"
      loop: "{{ pyramid_apps }}"
    - name: create project database
      ansible.builtin.script: "setup_dbs.sh '{{ item.0.db_name }}' '{{ item.0.db_encoding }}' '{{ item.0.db_user }}' '{{ item.0.db_pass }}'"
      when: "item.1.matched"
      loop: "{{ pyramid_apps|zip(alembic_configs)|list }}"
    - name: run db migration
      ansible.builtin.command: "{{ item.0.base_dir }}/.venv/bin/alembic -c production.ini upgrade head"
      args:
        chdir: "{{ item.0.base_dir }}"
      when: "item.1.matched"
      loop: "{{ pyramid_apps|zip(alembic_configs)|list }}"
    - name: generate nginx config
      ansible.builtin.template:
        src: "nginx_config.j2"
        dest: "/etc/nginx/sites-available/{{ item.domain_name }}"
        owner: "root"
        group: "root"
        mode: "0644"
      loop: "{{ pyramid_apps }}"
    - name: enable nginx config
      ansible.builtin.file:
        src: "/etc/nginx/sites-available/{{ item.domain_name }}"
        dest: "/etc/nginx/sites-enabled/{{ item.domain_name }}"
        state: link
      loop: "{{ pyramid_apps }}"
    - name: reload nginx
      ansible.builtin.systemd:
        name: "nginx"
        state: "reloaded"
  tags:
    - pyramid_apps
